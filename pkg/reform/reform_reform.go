// Code generated by gopkg.in/reform.v1. DO NOT EDIT.

package reform

import (
	"fmt"
	"strings"

	"gopkg.in/reform.v1"
	"gopkg.in/reform.v1/parse"
)

type usersTableType struct {
	s parse.StructInfo
	z []interface{}
}

// Schema returns a schema name in SQL database ("").
func (v *usersTableType) Schema() string {
	return v.s.SQLSchema
}

// Name returns a view or table name in SQL database ("users").
func (v *usersTableType) Name() string {
	return v.s.SQLName
}

// Columns returns a new slice of column names for that view or table in SQL database.
func (v *usersTableType) Columns() []string {
	return []string{"id", "name", "phone", "date", "city", "country", "email", "coordinates"}
}

// NewStruct makes a new struct for that view or table.
func (v *usersTableType) NewStruct() reform.Struct {
	return new(Users)
}

// NewRecord makes a new record for that table.
func (v *usersTableType) NewRecord() reform.Record {
	return new(Users)
}

// PKColumnIndex returns an index of primary key column for that table in SQL database.
func (v *usersTableType) PKColumnIndex() uint {
	return uint(v.s.PKFieldIndex)
}

// UsersTable represents users view or table in SQL database.
var UsersTable = &usersTableType{
	s: parse.StructInfo{Type: "Users", SQLSchema: "", SQLName: "users", Fields: []parse.FieldInfo{{Name: "ID", Type: "int32", Column: "id"}, {Name: "Name", Type: "string", Column: "name"}, {Name: "Phone", Type: "string", Column: "phone"}, {Name: "Date", Type: "string", Column: "date"}, {Name: "City", Type: "string", Column: "city"}, {Name: "Country", Type: "string", Column: "country"}, {Name: "Email", Type: "string", Column: "email"}, {Name: "Coordinates", Type: "string", Column: "coordinates"}}, PKFieldIndex: 0},
	z: new(Users).Values(),
}

// String returns a string representation of this struct or record.
func (s Users) String() string {
	res := make([]string, 8)
	res[0] = "ID: " + reform.Inspect(s.ID, true)
	res[1] = "Name: " + reform.Inspect(s.Name, true)
	res[2] = "Phone: " + reform.Inspect(s.Phone, true)
	res[3] = "Date: " + reform.Inspect(s.Date, true)
	res[4] = "City: " + reform.Inspect(s.City, true)
	res[5] = "Country: " + reform.Inspect(s.Country, true)
	res[6] = "Email: " + reform.Inspect(s.Email, true)
	res[7] = "Coordinates: " + reform.Inspect(s.Coordinates, true)
	return strings.Join(res, ", ")
}

// Values returns a slice of struct or record field values.
// Returned interface{} values are never untyped nils.
func (s *Users) Values() []interface{} {
	return []interface{}{
		s.ID,
		s.Name,
		s.Phone,
		s.Date,
		s.City,
		s.Country,
		s.Email,
		s.Coordinates,
	}
}

// Pointers returns a slice of pointers to struct or record fields.
// Returned interface{} values are never untyped nils.
func (s *Users) Pointers() []interface{} {
	return []interface{}{
		&s.ID,
		&s.Name,
		&s.Phone,
		&s.Date,
		&s.City,
		&s.Country,
		&s.Email,
		&s.Coordinates,
	}
}

// View returns View object for that struct.
func (s *Users) View() reform.View {
	return UsersTable
}

// Table returns Table object for that record.
func (s *Users) Table() reform.Table {
	return UsersTable
}

// PKValue returns a value of primary key for that record.
// Returned interface{} value is never untyped nil.
func (s *Users) PKValue() interface{} {
	return s.ID
}

// PKPointer returns a pointer to primary key field for that record.
// Returned interface{} value is never untyped nil.
func (s *Users) PKPointer() interface{} {
	return &s.ID
}

// HasPK returns true if record has non-zero primary key set, false otherwise.
func (s *Users) HasPK() bool {
	return s.ID != UsersTable.z[UsersTable.s.PKFieldIndex]
}

// SetPK sets record primary key.
func (s *Users) SetPK(pk interface{}) {
	if i64, ok := pk.(int64); ok {
		s.ID = int32(i64)
	} else {
		s.ID = pk.(int32)
	}
}

// check interfaces
var (
	_ reform.View   = UsersTable
	_ reform.Struct = (*Users)(nil)
	_ reform.Table  = UsersTable
	_ reform.Record = (*Users)(nil)
	_ fmt.Stringer  = (*Users)(nil)
)

func init() {
	parse.AssertUpToDate(&UsersTable.s, new(Users))
}
